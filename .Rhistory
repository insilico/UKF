}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq)
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
sample_i <- as.matrix(table(sample(dna.seq,n.data,replace=T))/n.data,ncol=4)
cat("\n")
cat(sample_i)
boot.table[i,] <- sample_i
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq)
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
sample_i <- as.matrix(table(sample(dna.seq,n.data,replace=T))/n.data,ncol=4)
cat(table(sample(dna.seq,n.data,replace=T)))
cat("\n")
cat(sample_i)
boot.table[i,] <- sample_i
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq)
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
sample_i <- as.matrix(table(sample(dna.seq,n.data,replace=T))/n.data,ncol=4)
temp<-table(sample(dna.seq,n.data,replace=T))
cat(temp)
cat("\n")
cat(sample_i)
boot.table[i,] <- sample_i
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq)
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
sample_i <- as.matrix(table(sample(dna.seq,n.data,replace=T))/n.data,ncol=4)
temp<-table(sample(dna.seq,n.data,replace=T))
cat(temp)
cat("\n")
cat(sample_i)
cat("\n")
boot.table[i,] <- sample_i
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq)
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
sample_i <- as.matrix(table(sample(dna.seq,n.data,replace=T))/n.data,ncol=4)
dna.probs<-table(sample(dna.seq,n.data,replace=T))/n.data
cat(dna.probs)
cat("\n")
cat(sample_i)
cat("\n")
boot.table[i,] <- sample_i
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq)
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
sample_i <- as.matrix(table(sample(dna.seq,n.data,replace=T))/n.data,ncol=4)
dna.probs<-table(sample(dna.seq,n.data,replace=T))/n.data
cat(i,"\n")
cat(dna.probs)
cat("\n")
cat(sample_i)
cat("\n")
boot.table[i,] <- sample_i
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq)
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
#sample_i <- as.matrix(table(sample(dna.seq,n.data,replace=T))/n.data,ncol=4)
dna.probs<-table(sample(dna.seq,n.data,replace=T))/n.data
cat(i,"\n")
cat(dna.probs)
cat("\n")
boot.table[i,] <- dna.probs
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
.09+.35+.56
dna.sim
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq) + 4  # need this because sometimes a nucleotide not sampled
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
#sample_i <- as.matrix(table(sample(dna.seq,n.data,replace=T))/n.data,ncol=4)
bootstrap_i <- sample(dna.seq,n.data,replace=T)
bootstrap_i <- c(boostrap_i,"A","C","G","T") # add A,C,G,T so there is always at least 1 of each
dna.probs<-table(bootstrap_i)/n.data
cat(i,"\n")
cat(dna.probs)
cat("\n")
boot.table[i,] <- dna.probs
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq) + 4  # need this because sometimes a nucleotide not sampled
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
#sample_i <- as.matrix(table(sample(dna.seq,n.data,replace=T))/n.data,ncol=4)
bootstrap_i <- sample(dna.seq,n.data,replace=T)
bootstrap_i <- c(bootstrap_i,"A","C","G","T") # add A,C,G,T so there is always at least 1 of each
dna.probs<-table(bootstrap_i)/n.data
cat(i,"\n")
cat(dna.probs)
cat("\n")
boot.table[i,] <- dna.probs
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot.dna.prob <- function(dna.seq, n.boot){
# boot.avg is a vector of bootstrap estimates of the nucleotide probabilities.
# Create a vector from the DNA sequence that is the same size but sampled with replacement.
# so some of the values will be repeated and some left out. Then compute the nucleotide probabilites
# of each boostrap sample.
n.data <- length(dna.seq) + 4  # need this because sometimes a nucleotide not sampled
boot.table <- matrix(rep(0,4*n.boot), ncol = 4)
cat(dim(boot.table))
for(i in 1:n.boot){
bootstrap_i <- sample(dna.seq,n.data,replace=T)
bootstrap_i <- c(bootstrap_i,"A","C","G","T") # add A,C,G,T so there is always at least 1 of each
dna.probs<-table(bootstrap_i)/n.data
boot.table[i,] <- dna.probs
}
#sampleFN <- function(x.dummy){ table(sample(dna.seq,n.data,replace=T))/n.data}
#boot.table <- unlist(sapply(1:n.boot, sampleFN))
#boot.table.long <- replicate(n.boot, matrix(numeric(table(sample(dna.seq,n.data,replace=T))/n.data),ncol=4 )
# makes one long vector instead of stacking, sapply might be better
# need to reshape
#  boot.table <- matrix(boot.table.long,ncol=4)
return(boot.table)
}
# bootstrap and collect results into table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot1.means <- colMeans(boot1.table) # pre
boot.ci <- t(sapply(1:4,function(x) quantile(boot1.table[,x],c(.025,.975))))
boot1.results.table <- cbind(boot.means,boot.ci)
boot1.results.table
boot1.table <- boot.dna.prob(dna.sim,1000)
boot1.means <- colMeans(boot1.table) # pretty much the same as raw, but now we can compute 95-CI
boot.ci <- t(sapply(1:4,function(x) quantile(boot1.table[,x],c(.025,.975))))
boot1.results.table <- cbind(boot.means,boot.ci)
boot1.results.table
source('~/Documents/Teaching/BioinformaticsI/Fall2015_Bioinfo1/introR/bootstrap_example.R')
source('~/Documents/Teaching/BioinformaticsI/Fall2015_Bioinfo1/introR/bootstrap_example.R')
boot1.results.table
mean(b1)   # boostrap estimate of the statistic (mean)
quantile(b1,c(.025,.975))
boot1.results.table
boot1.means
row.names(boot1.results.table)
row.names(boot1.results.table) <- c("A","C","G","T")
boot1.results.table
mc.integrate<-function(f,a,b,nsample){
#randomly generate n x-values between a and b
x.vec<-runif(nsample,a,b) #between a and b n times
#find average of f at these randomly-generated values
f.vec<-erf.integrand(x.vec)
f.mean<-mean(f.vec)
A<-(b-a)*f.mean #area is the start minus initial x timesthe sum from 0 to n-1 of f(x)/nterms ???
return(A)
}
f.quarter.circle<-function(x){
sqrt(1-(x^2))
}
pi<-4*mc.integrate(f.quarter.circle,0,1,10^7)
mc.integrate<-function(f,a,b,nsample){
#randomly generate n x-values between a and b
x.vec<-runif(nsample,a,b) #between a and b n times
#find average of f at these randomly-generated values
f.vec<-f(x.vec)
f.mean<-mean(f.vec)
A<-(b-a)*f.mean #area is the start minus initial x timesthe sum from 0 to n-1 of f(x)/nterms ???
return(A)
}
f.quarter.circle<-function(x){
sqrt(1-(x^2))
}
pi<-4*mc.integrate(f.quarter.circle,0,1,10^7)
pi
pi<-4*mc.integrate(f.quarter.circle,0,1,10^8)
pi<-4*mc.integrate(f.quarter.circle,0,1,10^8)
pi
sent = 8
inc = 2
total = 200
idx = 2
while (idx <= sent){
(total = total -idx*idx)
(idx = idx + inc)
}
sent = 8
inc = 2
total = 200
idx = 2
while (idx <= sent){
(total = total -idx*idx)
(idx = idx + inc)
cat(total, "\t", idx, "\n")
}
total
idx
?p.adjust
A<-matrix(1,nrow=4,ncol=4)
B <- A
for (i in seq(2,4)){
for (j in seq(1,i-1)){
B[i,j] <- 0
}
}
B
x<-seq(13,62,7)
x
(62-13)/7 + 1
array <- seq(from=30,to=20,len=6)
my.sum <- 0
for (x in array){
my.sum <- my.sum+x
cat(n, "\t", x, "\t", my.sum, "\n")
}
array <- seq(from=30,to=20,len=6)
my.sum <- 0
n<-1
for (x in array){
my.sum <- my.sum+x
cat(n, "\t", x, "\t", my.sum, "\n")
n <- n + 1
}
output <- my.sum/length(array)
output
total <- 100
sentinel <- 4
while (total > sentinel){
total <- total - sentinel
sentinel <- sentinel * 2
cat(sentinel, " : ", total, "\n")
}
total <- 100
sentinel <- 4
while (total > sentinel){
total <- total - sentinel
sentinel <- sentinel * 2
cat(total, "\t", sentinel, "\n")
}
my.dist4 <- matrix(data=rep(999,36),ncol=6)
my.dist4[1,2]<-5; my.dist4[1,3]<-4;  my.dist4[1,4]<-7; my.dist4[1,5]<-6; my.dist4[1,6]<-8;
my.dist4[2,3]<-7; my.dist4[2,4]<-10;  my.dist4[2,5]<-9; my.dist4[2,6]<-11;
my.dist4[3,4]<-7; my.dist4[3,5]<-6;  my.dist4[3,6]<-8;
my.dist4[4,5]<-5;  my.dist4[4,6]<-9;
my.dist4[5,6]<-8;
diag(my.dist4)<-999  # force diagonal to be big just in case
my.dist4[lower.tri(my.dist4)] = t(my.dist4)[lower.tri(my.dist4)]
my.dist4
diag(my.dist4)<-999  # force diagonal to be big just in case
my.dist4 <- matrix(data=rep(999,36),ncol=6)
my.dist4[1,2]<-2; my.dist4[1,3]<-4;  my.dist4[1,4]<-6; my.dist4[1,5]<-6; my.dist4[1,6]<-8;
my.dist4[2,3]<-4; my.dist4[2,4]<-6;  my.dist4[2,5]<-6; my.dist4[2,6]<-8;
my.dist4[3,4]<-6; my.dist4[3,5]<-6;  my.dist4[3,6]<-8;
my.dist4[4,5]<-5;  my.dist4[4,6]<-8;
my.dist4[5,6]<-8;
diag(my.dist4)<-999  # force diagonal to be big just in case
my.dist4
my.dist4[lower.tri(my.dist4)] = t(my.dist4)[lower.tri(my.dist4)]
test4 <- hclust(as.dist(my.dist4), method="average") # average linkage, UPGMA
test4$merge
test4$height
test4$order
test4$labels<-LETTERS[1:ncol(my.dist4)]
plot(test4,hang=-1)
plot(test4,hang=-1)
test4$merge
test4$height
myMat <- matrix(1:15,ncol=3,byrow=F)
myMat
myArr <- array(1:24,dim=c(3,4,2))
myArr[,,1]
447,000*1.4
447000*1.4
inf
Inf
A<-matrix(1,nrow=4,ncol=4)
B <- A
for (i in seq(2,4)){
for( j in seq(1,3)){
if(i>j){
B[ i,j ]<- 0
}
}
}
B
zz<-list("x"=5)
zz
zz$x
0<Inf
my.dist4 <- matrix(data=rep(999,36),ncol=6)
my.dist4[1,2]<-5; my.dist4[1,3]<-4;  my.dist4[1,4]<-7; my.dist4[1,5]<-6; my.dist4[1,6]<-8;
my.dist4[2,3]<-7; my.dist4[2,4]<-10;  my.dist4[2,5]<-9; my.dist4[2,6]<-11;
my.dist4[3,4]<-7; my.dist4[3,5]<-6;  my.dist4[3,6]<-8;
my.dist4[4,5]<-5;  my.dist4[4,6]<-9;
my.dist4[5,6]<-8;
diag(my.dist4)<-999  # force diagonal to be big just in case
my.dist4[lower.tri(my.dist4)] = t(my.dist4)[lower.tri(my.dist4)]
my.dist4
my.dist4 <- matrix(data=rep(999,36),ncol=6)
my.dist4 <- matrix(data=rep(999,36),ncol=6)
my.dist4[1,2]<-2; my.dist4[1,3]<-4;  my.dist4[1,4]<-6; my.dist4[1,5]<-6; my.dist4[1,6]<-8;
my.dist4[2,3]<-4; my.dist4[2,4]<-6;  my.dist4[2,5]<-6; my.dist4[2,6]<-8;
my.dist4[3,4]<-6; my.dist4[3,5]<-6;  my.dist4[3,6]<-8;
my.dist4[4,5]<-5;  my.dist4[4,6]<-8;
my.dist4[5,6]<-8;
diag(my.dist4)<-999  # force diagonal to be big just in case
my.dist4[lower.tri(my.dist4)] = t(my.dist4)[lower.tri(my.dist4)]
my.dist4
test4 <- hclust(as.dist(my.dist4), method="average") # average linkage, UPGMA
test4$merge
test4$height
library(igraph)
n <- 5000 # nodes
p <- .03 # probability of random two nodes being connected
all_pairs <- runif(n*(n-1)/2) # between 0-1
edges <- as.numeric(all_pairs<p) # vector of 1/0 successes
A.sim <- matrix(0,nrow=n,ncol=n)
A.sim[upper.tri(A.sim)] <- edges # makes the upper tri
A.sim[lower.tri(A.sim)] <- A.sim[upper.tri(A.sim)]
A.adj <- graph.adjacency(A.sim, mode="undirected")
kvec <- rowSums(A.sim)
mean(kvec)
kvec2 <- degree(A.adj)
mean(kvec2)
mean(kvec2)/2
diag(A.adj)
A.adj
A.adj.matrix <- as.matrix(A.adj)
A.adj.matrix
A.adj.matrix <- get.adjacency(A.adj)
A.adj.matrix
diag(A.adj.matrix)
A.adj.matrix <- as.matrix(get.adjacency(A.adj))
diag(A.adj.matrix)
diag(A.sim)
kvec2 <- rowSums(A.adj.matrix)
mean(kvec2)
mean(kvec)
mean(kvec)/2
mean(kvec2)/2
kvec <- rowSums(A.sim)
mean(kvec)
kvec3 <- rowSums(A.sim)
mean(kvec3)
kvec2 <- rowSums(A.adj.matrix)
mean(kvec2)
degree(A.sim)
degree(A.adj.matrix)
A.sim[lower.tri(A.sim)] == A.sim[upper.tri(A.sim)]
A.adj <- graph_from_adjacency_matrix(A.sim, mode="upper")
degree(A.adj)
mean(degree(A.adj))
mean(kvec)
mean(degree(A.adj))
A.adj.matrix <- as.matrix(get.adjacency(A.adj))
kvec2 <- rowSums(A.adj.matrix)
mean(kvec2)
kvec3 <- rowSums(A.sim)
mean(kvec3)
combinations(10,2)
combination(10,2)
combn(10,2)
library(pracma)
nchoosek(10,2)
nchoosek(5,2)
library(devtools)
library(roxygen2)
create("UKF")
library(devtools)
library(roxygen2)
setwd("~/Documents/git/UKF")
document()
document()
